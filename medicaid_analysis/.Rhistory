##################################
# Grab quality_measures dataset
quality_measures <- read_csv("2014_to_2022_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
# Remove state rates with weird coding
quality_measures <- quality_measures[quality_measures$state_rate != "NR", ]
quality_measures <- quality_measures[quality_measures$state_rate != "DS", ]
iteration = 1
store <- data.frame()
for (measure in measure_names){
quality_measures_subset <- quality_measures[quality_measures$measure_abbreviation == measure, ]
###
# QA: Check to make sure each state only has one unique year
qaDistinctYear <- quality_measures_subset %>%
group_by(state) %>%
summarize(unique_years = n_distinct(ffy),
row_count = n())
different_rows <- qaDistinctYear %>% filter(unique_years != row_count)
if (nrow(different_rows) == 0) {
print("No rows with duplicate years.")
}
else{
stop("Detected rows with duplicate years")
}
###
models <- quality_measures_subset %>%
group_by(state) %>%
do(model = lm(state_rate ~ reporting_date + postcovid + reporting_date * postcovid, data = .))
# Extract coefficients from the models
coefficients <- models %>%
summarise(state = first(state),
beta1 = coef(model)[2],
beta3 = ifelse(length(coef(model)) > 3, coef(model)[4], NA))
# Remove rows with nulls and rank
coefficients <- coefficients[!is.na(coefficients$beta3), ]
coefficients$beta3rank <- rank(-coefficients$beta3)
# Rename
beta1 <- paste0(measure, "_beta1")
beta3 <- paste0(measure, "_beta3")
beta3rank <- paste0(measure, "_beta3rank")
colnames(coefficients) <- c("state", beta1, beta3, beta3rank)
if (iteration == 1){
store <- coefficients
}
else {
store <- full_join(store, coefficients, by = "state")
}
# Increment
iteration = iteration + 1
}
# Average
beta3_rank_measure_names <- paste0(measure_names, "_beta3rank")
store$mean_rank <- rowMeans(store[beta3_rank_measure_names], na.rm = TRUE)
# Remove states with more than 1 measure being NA
na_count <- data.frame(store$state, cnt = rowSums(is.na(store)))
na_count$store.state <- na_count %>% filter(cnt > 3)
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
###### Define Measures to Run ####
measure_names <- c("BCS-AD", "CCS-AD", "PPC-AD", "CHL-AD")
##################################
# Grab quality_measures dataset
quality_measures <- read_csv("2014_to_2022_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
# Remove state rates with weird coding
quality_measures <- quality_measures[quality_measures$state_rate != "NR", ]
quality_measures <- quality_measures[quality_measures$state_rate != "DS", ]
iteration = 1
store <- data.frame()
for (measure in measure_names){
quality_measures_subset <- quality_measures[quality_measures$measure_abbreviation == measure, ]
###
# QA: Check to make sure each state only has one unique year
qaDistinctYear <- quality_measures_subset %>%
group_by(state) %>%
summarize(unique_years = n_distinct(ffy),
row_count = n())
different_rows <- qaDistinctYear %>% filter(unique_years != row_count)
if (nrow(different_rows) == 0) {
print("No rows with duplicate years.")
}
else{
stop("Detected rows with duplicate years")
}
###
models <- quality_measures_subset %>%
group_by(state) %>%
do(model = lm(state_rate ~ reporting_date + postcovid + reporting_date * postcovid, data = .))
# Extract coefficients from the models
coefficients <- models %>%
summarise(state = first(state),
beta1 = coef(model)[2],
beta3 = ifelse(length(coef(model)) > 3, coef(model)[4], NA))
# Remove rows with nulls and rank
coefficients <- coefficients[!is.na(coefficients$beta3), ]
coefficients$beta3rank <- rank(-coefficients$beta3)
# Rename
beta1 <- paste0(measure, "_beta1")
beta3 <- paste0(measure, "_beta3")
beta3rank <- paste0(measure, "_beta3rank")
colnames(coefficients) <- c("state", beta1, beta3, beta3rank)
if (iteration == 1){
store <- coefficients
}
else {
store <- full_join(store, coefficients, by = "state")
}
# Increment
iteration = iteration + 1
}
# Average
beta3_rank_measure_names <- paste0(measure_names, "_beta3rank")
store$mean_rank <- rowMeans(store[beta3_rank_measure_names], na.rm = TRUE)
# Remove states with more than 1 measure being NA
na_count <- data.frame(store$state, cnt = rowSums(is.na(store)))
na_count <- na_count %>% filter(cnt > 3)
states_na <- na_count$store.state
# Rank average of ranks
store$final_ranking <- rank(store$mean_rank)
write.csv(store, "quality_measures_prepostcovid_rank.csv", row.names = FALSE)
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
###### Define Measures to Run ####
measure_names <- c("BCS-AD", "CCS-AD", "PPC-AD", "CHL-AD")
##################################
# Grab quality_measures dataset
quality_measures <- read_csv("2014_to_2022_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
# Remove state rates with weird coding
quality_measures <- quality_measures[quality_measures$state_rate != "NR", ]
quality_measures <- quality_measures[quality_measures$state_rate != "DS", ]
iteration = 1
store <- data.frame()
for (measure in measure_names){
quality_measures_subset <- quality_measures[quality_measures$measure_abbreviation == measure, ]
###
# QA: Check to make sure each state only has one unique year
qaDistinctYear <- quality_measures_subset %>%
group_by(state) %>%
summarize(unique_years = n_distinct(ffy),
row_count = n())
different_rows <- qaDistinctYear %>% filter(unique_years != row_count)
if (nrow(different_rows) == 0) {
print("No rows with duplicate years.")
}
else{
stop("Detected rows with duplicate years")
}
###
models <- quality_measures_subset %>%
group_by(state) %>%
do(model = lm(state_rate ~ reporting_date + postcovid + reporting_date * postcovid, data = .))
# Extract coefficients from the models
coefficients <- models %>%
summarise(state = first(state),
beta1 = coef(model)[2],
beta3 = ifelse(length(coef(model)) > 3, coef(model)[4], NA))
# Remove rows with nulls and rank
coefficients <- coefficients[!is.na(coefficients$beta3), ]
coefficients$beta3rank <- rank(-coefficients$beta3)
# Rename
beta1 <- paste0(measure, "_beta1")
beta3 <- paste0(measure, "_beta3")
beta3rank <- paste0(measure, "_beta3rank")
colnames(coefficients) <- c("state", beta1, beta3, beta3rank)
if (iteration == 1){
store <- coefficients
}
else {
store <- full_join(store, coefficients, by = "state")
}
# Increment
iteration = iteration + 1
}
# Average
beta3_rank_measure_names <- paste0(measure_names, "_beta3rank")
store$mean_rank <- rowMeans(store[beta3_rank_measure_names], na.rm = TRUE)
# Remove states with more than 1 measure being NA
na_count <- data.frame(store$state, cnt = rowSums(is.na(store)))
na_count <- na_count %>% filter(cnt > 3)
states_to_remove <- na_count$store.state
store <- store %>%
filter(!state %in% states_to_remove)
# Rank average of ranks
store$final_ranking <- rank(store$mean_rank)
write.csv(store, "quality_measures_prepostcovid_rank.csv", row.names = FALSE)
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
###### Define Measures to Run ####
measure_names <- c("BCS-AD", "CCS-AD", "PPC-AD", "CHL-AD")
##################################
# Grab quality_measures dataset
quality_measures <- read_csv("2014_to_2022_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
# Remove state rates with weird coding
quality_measures <- quality_measures[quality_measures$state_rate != "NR", ]
quality_measures <- quality_measures[quality_measures$state_rate != "DS", ]
iteration = 1
store <- data.frame()
for (measure in measure_names){
quality_measures_subset <- quality_measures[quality_measures$measure_abbreviation == measure, ]
###
# QA: Check to make sure each state only has one unique year
qaDistinctYear <- quality_measures_subset %>%
group_by(state) %>%
summarize(unique_years = n_distinct(ffy),
row_count = n())
different_rows <- qaDistinctYear %>% filter(unique_years != row_count)
if (nrow(different_rows) == 0) {
print("No rows with duplicate years.")
}
else{
stop("Detected rows with duplicate years")
}
###
models <- quality_measures_subset %>%
group_by(state) %>%
do(model = lm(state_rate ~ reporting_date + postcovid + reporting_date * postcovid, data = .))
# Extract coefficients from the models
coefficients <- models %>%
summarise(state = first(state),
beta1 = coef(model)[2],
beta3 = ifelse(length(coef(model)) > 3, coef(model)[4], NA))
# Remove rows with nulls and rank
coefficients <- coefficients[!is.na(coefficients$beta3), ]
coefficients$beta3rank <- rank(-coefficients$beta3)
# Rename
beta1 <- paste0(measure, "_beta1")
beta3 <- paste0(measure, "_beta3")
beta3rank <- paste0(measure, "_beta3rank")
colnames(coefficients) <- c("state", beta1, beta3, beta3rank)
if (iteration == 1){
store <- coefficients
}
else {
store <- full_join(store, coefficients, by = "state")
}
# Increment
iteration = iteration + 1
}
# Average
beta3_rank_measure_names <- paste0(measure_names, "_beta3rank")
store$mean_rank <- rowMeans(store[beta3_rank_measure_names], na.rm = TRUE)
# Remove states with more than 1 measure being NA
na_count <- data.frame(store$state, cnt = rowSums(is.na(store)))
na_count <- na_count %>% filter(cnt > 3)
states_to_remove <- na_count$store.state
store <- store %>%
filter(!state %in% states_to_remove)
# Rank average of ranks
store$final_ranking <- rank(store$mean_rank)
write.csv(store, "quality_measures_prepostcovid_rank.csv", row.names = FALSE)
View(store)
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
###### Define Measures to Run ####
measure_names <- c("BCS-AD", "CCS-AD", "PPC-AD", "CHL-AD")
##################################
# Grab quality_measures dataset
quality_measures <- read_csv("2014_to_2022_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
# Remove state rates with weird coding
quality_measures <- quality_measures[quality_measures$state_rate != "NR", ]
quality_measures <- quality_measures[quality_measures$state_rate != "DS", ]
iteration = 1
store <- data.frame()
for (measure in measure_names){
quality_measures_subset <- quality_measures[quality_measures$measure_abbreviation == measure, ]
###
# QA: Check to make sure each state only has one unique year
qaDistinctYear <- quality_measures_subset %>%
group_by(state) %>%
summarize(unique_years = n_distinct(ffy),
row_count = n())
different_rows <- qaDistinctYear %>% filter(unique_years != row_count)
if (nrow(different_rows) == 0) {
print("No rows with duplicate years.")
}
else{
stop("Detected rows with duplicate years")
}
###
models <- quality_measures_subset %>%
group_by(state) %>%
do(model = lm(state_rate ~ reporting_date + postcovid + reporting_date * postcovid, data = .))
# Extract coefficients from the models
coefficients <- models %>%
summarise(state = first(state),
beta1 = coef(model)[2],
beta3 = ifelse(length(coef(model)) > 3, coef(model)[4], NA))
# Remove rows with nulls and rank
coefficients <- coefficients[!is.na(coefficients$beta3), ]
coefficients$beta3rank <- rank(-coefficients$beta3)
# Rename
beta1 <- paste0(measure, "_beta1")
beta3 <- paste0(measure, "_beta3")
beta3rank <- paste0(measure, "_beta3rank")
colnames(coefficients) <- c("state", beta1, beta3, beta3rank)
if (iteration == 1){
store <- coefficients
}
else {
store <- full_join(store, coefficients, by = "state")
}
# Increment
iteration = iteration + 1
}
# Average
beta3_rank_measure_names <- paste0(measure_names, "_beta3rank")
store$mean_rank <- rowMeans(store[beta3_rank_measure_names], na.rm = TRUE)
# Remove states with more than 1 measure being NA
na_count <- data.frame(store$state, cnt = rowSums(is.na(store)))
na_count <- na_count %>% filter(cnt > 3)
states_to_remove <- na_count$store.state
store <- store %>%
filter(!state %in% states_to_remove)
# Rank average of ranks
store$final_ranking <- rank(-store$mean_rank)
write.csv(store, "quality_measures_prepostcovid_rank.csv", row.names = FALSE)
View(store)
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
rankings <- read_csv("quality_measures_prepostcovid_rank.csv")
## Analysis 1: Correlate ranking with medicaid spending ##
View(rankings)
View(rankings)
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
rankings <- read_csv("quality_measures_prepostcovid_rank.csv")
rankings <- rankings[, c("state", "final_ranking")]
## Analysis 1: Correlate ranking with medicaid spending ##
View(rankings)
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
rankings <- read_csv("quality_measures_prepostcovid_rank.csv")
rankings <- rankings[, c("state", "final_ranking")]
## Analysis 1: Correlate ranking with medicaid spending ##
medicaid_spending <- read_csv("Total_Medicaid_Spending_FY2022")
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
rankings <- read_csv("quality_measures_prepostcovid_rank.csv")
rankings <- rankings[, c("state", "final_ranking")]
## Analysis 1: Correlate ranking with medicaid spending ##
medicaid_spending <- read_csv("Total_Medicaid_Spending_FY2022.csv")
View(rankings)
View(medicaid_spending)
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
rankings <- read_csv("quality_measures_prepostcovid_rank.csv")
rankings <- rankings[, c("state", "final_ranking")]
## Analysis 1: Correlate ranking with medicaid spending ##
medicaid_spending <- read_csv("Total_Medicaid_Spending_FY2022.csv")
medicaid_spending_ranking <- inner_join(rankings, medicaid_spending, by = "state")
View(medicaid_spending)
View(rankings)
View(rankings)
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
rankings <- read_csv("quality_measures_prepostcovid_rank.csv")
rankings <- rankings[, c("state", "final_ranking")]
## Analysis 1: Correlate ranking with medicaid spending ##
medicaid_spending <- read_csv("Total_Medicaid_Spending_FY2022.csv")
medicaid_spending_ranking <- inner_join(rankings, medicaid_spending, by = c("state", "State")
# Load libraries
library(tidyverse)
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
rankings <- read_csv("quality_measures_prepostcovid_rank.csv")
rankings <- rankings[, c("state", "final_ranking")]
## Analysis 1: Correlate ranking with medicaid spending ##
medicaid_spending <- read_csv("Total_Medicaid_Spending_FY2022.csv")
medicaid_spending_ranking <- inner_join(rankings, medicaid_spending, by = c("state", "State"))
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
rankings <- read_csv("quality_measures_prepostcovid_rank.csv")
rankings <- rankings[, c("state", "final_ranking")]
## Analysis 1: Correlate ranking with medicaid spending ##
medicaid_spending <- read_csv("Total_Medicaid_Spending_FY2022.csv")
medicaid_spending_ranking <- inner_join(rankings, medicaid_spending, by = c("state" = "State"))
View(rankings)
View(medicaid_spending_ranking)
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
rankings <- read_csv("quality_measures_prepostcovid_rank.csv")
rankings <- rankings[, c("state", "final_ranking")]
## Analysis 1: Correlate ranking with medicaid spending ##
medicaid_spending <- read_csv("Total_Medicaid_Spending_FY2022.csv")
medicaid_spending <- medicaid_spending[, c("State", "PMPY")]
medicaid_spending_ranking <- inner_join(rankings, medicaid_spending, by = c("state" = "State"))
View(medicaid_spending_ranking)
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
rankings <- read_csv("quality_measures_prepostcovid_rank.csv")
rankings <- rankings[, c("state", "final_ranking")]
## Analysis 1: Correlate ranking with medicaid spending ##
medicaid_spending <- read_csv("Total_Medicaid_Spending_FY2022.csv")
medicaid_spending <- medicaid_spending[, c("State", "PMPY")]
medicaid_spending_ranking <- inner_join(rankings, medicaid_spending, by = c("state" = "State"))
spearman_corr <- cor(medicaid_spending_ranking$final_ranking,
medicaid_spending_ranking$PMPY, method = "spearman")
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
rankings <- read_csv("quality_measures_prepostcovid_rank.csv")
rankings <- rankings[, c("state", "final_ranking")]
## Analysis 1: Correlate ranking with medicaid spending ##
medicaid_spending <- read_csv("Total_Medicaid_Spending_FY2022.csv")
medicaid_spending <- medicaid_spending[, c("State", "PMPY")]
medicaid_spending_ranking <- inner_join(rankings, medicaid_spending, by = c("state" = "State"))
corr_medicaidspending <- cor(medicaid_spending_ranking$final_ranking,
medicaid_spending_ranking$PMPY, method = "spearman")
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
rankings <- read_csv("quality_measures_prepostcovid_rank.csv")
rankings <- rankings[, c("state", "final_ranking")]
## Analysis 1: Correlate ranking with medicaid spending ##
medicaid_spending <- read_csv("Total_Medicaid_Spending_FY2022.csv")
medicaid_spending <- medicaid_spending[, c("State", "PMPY")]
medicaid_spending_ranking <- inner_join(rankings, medicaid_spending, by = c("state" = "State"))
corr_medicaidspending <- cor(medicaid_spending_ranking$final_ranking,
medicaid_spending_ranking$PMPY, method = "spearman")
corr_medicaidspendingR <- corr_medicaidspending$estimate
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
rankings <- read_csv("quality_measures_prepostcovid_rank.csv")
rankings <- rankings[, c("state", "final_ranking")]
## Analysis 1: Correlate ranking with medicaid spending ##
medicaid_spending <- read_csv("Total_Medicaid_Spending_FY2022.csv")
medicaid_spending <- medicaid_spending[, c("State", "PMPY")]
medicaid_spending_ranking <- inner_join(rankings, medicaid_spending, by = c("state" = "State"))
corr_medicaidspending <- cor(medicaid_spending_ranking$final_ranking,
medicaid_spending_ranking$PMPY, method = "spearman")
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
rankings <- read_csv("quality_measures_prepostcovid_rank.csv")
rankings <- rankings[, c("state", "final_ranking")]
## Analysis 1: Correlate ranking with medicaid spending ##
medicaid_spending <- read_csv("Total_Medicaid_Spending_FY2022.csv")
medicaid_spending <- medicaid_spending[, c("State", "PMPY")]
medicaid_spending_ranking <- inner_join(rankings, medicaid_spending, by = c("state" = "State"))
corr_medicaidspending <- cor(medicaid_spending_ranking$final_ranking,
medicaid_spending_ranking$PMPY, method = "spearman")
## Analysis 2: Correlate ranking with MA Penetration ##
ma_penetration <- read_csv("MA_Penetration_2022_12_by_state.csv")
View(ma_penetration)
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
rankings <- read_csv("quality_measures_prepostcovid_rank.csv")
rankings <- rankings[, c("state", "final_ranking")]
## Analysis 1: Correlate ranking with medicaid spending ##
medicaid_spending <- read_csv("Total_Medicaid_Spending_FY2022.csv")
medicaid_spending <- medicaid_spending[, c("State", "PMPY")]
medicaid_spending_ranking <- inner_join(rankings, medicaid_spending, by = c("state" = "State"))
corr_medicaidspending <- cor(medicaid_spending_ranking$final_ranking,
medicaid_spending_ranking$PMPY, method = "spearman")
## Analysis 2: Correlate ranking with MA Penetration ##
ma_penetration <- read_csv("MA_Penetration_2022_12_by_state.csv")
ma_penetration <- ma_penetration[, c("State", "penetration")]
ma_penetration_ranking <- inner_join(rankings, ma_penetration, by = c("state" = "State"))
corr_ma_penetration <- cor(ma_penetration_ranking$final_ranking,
ma_penetration_ranking$penetration, method = "spearman")
