file_2020 <- read_csv("raw_data/2020_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
file_2020 <- tidy_table(file_2020)
file_2020$ffy <- "2020"
file_2019 <- read_csv("raw_data/2019_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
file_2019 <- tidy_table(file_2019)
file_2019$ffy <- "2019"
file_2018 <- read_csv("raw_data/2018_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
file_2018 <- tidy_table(file_2018)
file_2018$ffy <- "2018"
file_2017 <- read_csv("raw_data/2017_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
file_2017 <- tidy_table(file_2017)
file_2017$ffy <- "2017"
file_2016 <- read_csv("raw_data/2016_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
file_2016 <- tidy_table(file_2016)
file_2016$ffy <- "2016"
file_2015 <- read_csv("raw_data/2015_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
file_2015 <- tidy_table(file_2015)
file_2015$ffy <- "2015"
file_2014 <- read_csv("raw_data/2014_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
file_2014 <- tidy_table(file_2014)
file_2014$ffy <- "2014"
df_combined <- rbind(file_2014, file_2015, file_2016, file_2017, file_2018, file_2019,
file_2020, file_2021, file_2022)
# Rename columns
colnames(df_combined) <- c("state", "population", "measure_abbreviation",
"state_rate", "ffy")
# Write to CSV
write.csv(df_combined, "2014_to_2022_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv", row.names = FALSE)
View(df_combined)
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
###### Define Measures to Run ####
# measure_names <- c("BCS-AD", "CCS-AD", "PPC-AD", "CHL-AD")
measure_names <- c("BCS-AD")
##################################
# Grab quality_measures dataset
quality_measures <- read_csv("2014_to_2022_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
# Remove state rates with weird coding
quality_measures <- quality_measures[quality_measures$state_rate != "NR", ]
quality_measures <- quality_measures[quality_measures$state_rate != "DS", ]
iteration = 1
store <- data.frame()
for (measure in measure_names){
quality_measures_subset <- quality_measures[quality_measures$measure_abbreviation == measure, ]
###
# QA: Check to make sure each state only has one unique year
qaDistinctYear <- quality_measures_subset %>%
group_by(state) %>%
summarize(unique_years = n_distinct(ffy),
row_count = n())
different_rows <- qaDistinctYear %>% filter(unique_years != row_count)
if (nrow(different_rows) == 0) {
print("No rows with duplicate years.")
}
else{
stop("Detected rows with duplicate years")
}
###
models <- quality_measures_subset %>%
group_by(state) %>%
do(model = lm(state_rate ~ reporting_date + postcovid + reporting_date * postcovid, data = .))
# Extract coefficients from the models
coefficients <- models %>%
summarise(state = first(state),
beta1 = coef(model)[2],
beta3 = ifelse(length(coef(model)) > 3, coef(model)[4], NA))
# Remove rows with nulls and rank
coefficients <- coefficients[!is.na(coefficients$beta3), ]
coefficients$beta3rank <- rank(coefficients$beta3)
# Rename
beta1 <- paste0(measure, "_beta1")
beta3 <- paste0(measure, "_beta3")
beta3rank <- paste0(measure, "_beta3rank")
colnames(coefficients) <- c("state", beta1, beta3, beta3rank)
if (iteration == 1){
store <- coefficients
}
else {
store <- full_join(store, coefficients, by = "state")
}
# Increment
iteration = iteration + 1
}
# Average
beta3_rank_measure_names <- paste0(measure_names, "_beta3rank")
store$mean_rank <- rowMeans(store[beta3_rank_measure_names], na.rm = TRUE)
# Remove states with more than 1 measure being NA
na_count <- data.frame(store$state, cnt = rowSums(is.na(store)))
na_count <- na_count %>% filter(cnt > 4)
states_to_remove <- na_count$store.state
store <- store %>%
filter(!state %in% states_to_remove)
# Rank average of ranks
store$final_ranking <- rank(store$mean_rank)
write.csv(store, "quality_measures_prepostcovid_rank.csv", row.names = FALSE)
View(coefficients)
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
###### Define Measures to Run ####
measure_names <- c("BCS-AD", "CCS-AD", "PPC-AD", "CHL-AD")
##################################
# Grab quality_measures dataset
quality_measures <- read_csv("2014_to_2022_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
# Remove state rates with weird coding
quality_measures <- quality_measures[quality_measures$state_rate != "NR", ]
quality_measures <- quality_measures[quality_measures$state_rate != "DS", ]
iteration = 1
store <- data.frame()
for (measure in measure_names){
quality_measures_subset <- quality_measures[quality_measures$measure_abbreviation == measure, ]
###
# QA: Check to make sure each state only has one unique year
qaDistinctYear <- quality_measures_subset %>%
group_by(state) %>%
summarize(unique_years = n_distinct(ffy),
row_count = n())
different_rows <- qaDistinctYear %>% filter(unique_years != row_count)
if (nrow(different_rows) == 0) {
print("No rows with duplicate years.")
}
else{
stop("Detected rows with duplicate years")
}
###
models <- quality_measures_subset %>%
group_by(state) %>%
do(model = lm(state_rate ~ reporting_date + postcovid + reporting_date * postcovid, data = .))
# Extract coefficients from the models
coefficients <- models %>%
summarise(state = first(state),
beta1 = coef(model)[2],
beta3 = ifelse(length(coef(model)) > 3, coef(model)[4], NA))
# Remove rows with nulls and rank
coefficients <- coefficients[!is.na(coefficients$beta3), ]
coefficients$beta3rank <- rank(coefficients$beta3)
# Rename
beta1 <- paste0(measure, "_beta1")
beta3 <- paste0(measure, "_beta3")
beta3rank <- paste0(measure, "_beta3rank")
colnames(coefficients) <- c("state", beta1, beta3, beta3rank)
if (iteration == 1){
store <- coefficients
}
else {
store <- full_join(store, coefficients, by = "state")
}
# Increment
iteration = iteration + 1
}
# Average
beta3_rank_measure_names <- paste0(measure_names, "_beta3rank")
store$mean_rank <- rowMeans(store[beta3_rank_measure_names], na.rm = TRUE)
# Remove states with more than 1 measure being NA
na_count <- data.frame(store$state, cnt = rowSums(is.na(store)))
na_count <- na_count %>% filter(cnt > 4)
states_to_remove <- na_count$store.state
store <- store %>%
filter(!state %in% states_to_remove)
# Rank average of ranks
store$final_ranking <- rank(store$mean_rank)
write.csv(store, "quality_measures_prepostcovid_rank.csv", row.names = FALSE)
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
quality_measures_ranking <- read_csv("quality_measures_prepostcovid_rank.csv")
quality_measures_ranking <- quality_measures_ranking[, c("state", "final_ranking")]
### Analysis 1: Correlate between Ranking and Medicaid Spending by State
medicaid_spending <- read_csv("Total_Medicaid_Spending_FY2022.csv")
medicaid_spending <- medicaid_spending[, c("State", "PMPY")]
medicaid_spending <- subset(medicaid_spending, State %in% quality_measures_ranking$state)
medicaid_spending$pmpy_rank <- rank(medicaid_spending$PMPY)
medicaid_spending_ranking <- inner_join(quality_measures_ranking,
medicaid_spending,
by = c("state" = "State"))
result <- cor.test(medicaid_spending_ranking$final_ranking,
medicaid_spending_ranking$PMPY, method = "spearman")
print("***Analaysis 1 ***")
print(result$estimate)
print(result$p.value)
### Analysis 2: Correlate between Ranking and Medicare Advantage Penetration Rate
medicare_penetration <- read_csv("MA_Penetration_2022_12_by_state.csv")
medicare_penetration <- medicare_penetration[, c("State", "penetration")]
medicare_penetration <- subset(medicare_penetration, State %in% quality_measures_ranking$state)
medicare_penetration$penetration_rank <- rank(medicare_penetration$penetration)
medicare_penetration_ranking <- inner_join(quality_measures_ranking,
medicare_penetration,
by = c("state" = "State"))
print("***Analaysis 2 ***")
result <- cor.test(medicare_penetration_ranking$final_ranking,
medicare_penetration_ranking$penetration, method = "spearman")
print(result$estimate)
print(result$p.value)
### Analysis 3: Correlate between Ranking and Medicaid Renewal Rate
medicaid_renewal <- read_csv("Medicaid_Renewal_Rate_05232024.csv")
medicaid_renewal <- medicaid_renewal[, c("State", "RenewalRate")]
medicaid_renewal <- subset(medicaid_renewal, State %in% quality_measures_ranking$state)
medicaid_renewal$renewalrate_rank <- rank(medicaid_renewal$RenewalRate)
medicaid_renewal_ranking <- inner_join(quality_measures_ranking,
medicaid_renewal,
by = c("state" = "State"))
print("***Analaysis 3 ***")
result <- cor.test(medicaid_renewal_ranking$final_ranking,
medicaid_renewal_ranking$RenewalRate, method = "spearman")
print(result$estimate)
print(result$p.value)
### Analysis 4: Correlate between Ranking and COVID-19 Mortality Rate by State
mortality_rate_raw <- read_csv("covid_19_mortality_rate_by_state_2020_to_2022.csv")
mortality_rate_raw <- mortality_rate_raw[, c("STATE", "YEAR", "RATE")]
print("***Analaysis 4 ***")
for (year in c("2020", "2021", "2022")){
mortality_rate  <- subset(mortality_rate_raw, STATE %in% quality_measures_ranking$state)
mortality_rate <- subset(mortality_rate, YEAR == year)
mortality_rate$mortality_rate_rank <- rank(mortality_rate$RATE)
mortality_rate_ranking <- inner_join(quality_measures_ranking,
mortality_rate,
by = c("state" = "STATE"))
print(paste0(year, " COVID Morality Rate"))
result <- cor.test(mortality_rate_ranking$final_ranking,
mortality_rate_ranking$RATE, method = "spearman")
print(result$estimate)
print(result$p.value)
}
View(medicaid_renewal_ranking)
View(quality_measures_ranking)
View(medicaid_spending_ranking)
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
quality_measures_ranking <- read_csv("quality_measures_prepostcovid_rank.csv")
quality_measures_ranking <- quality_measures_ranking[, c("state", "final_ranking")]
### Analysis 1: Correlate between Ranking and Medicaid Spending by State
medicaid_spending <- read_csv("Total_Medicaid_Spending_FY2022.csv")
medicaid_spending <- medicaid_spending[, c("State", "PMPY")]
medicaid_spending <- subset(medicaid_spending, State %in% quality_measures_ranking$state)
medicaid_spending$pmpy_rank <- rank(medicaid_spending$PMPY)
medicaid_spending_ranking <- inner_join(quality_measures_ranking,
medicaid_spending,
by = c("state" = "State"))
result <- cor.test(medicaid_spending_ranking$final_ranking,
medicaid_spending_ranking$PMPY, method = "spearman")
print("***IMPROVEMENT RANKINGS x MEDICAID SPENDING ***")
print("Correlation: ")
print(result$estimate)
print("P-value:")
print(result$p.value)
### Analysis 2: Correlate between Ranking and Medicare Advantage Penetration Rate
medicare_penetration <- read_csv("MA_Penetration_2022_12_by_state.csv")
medicare_penetration <- medicare_penetration[, c("State", "penetration")]
medicare_penetration <- subset(medicare_penetration, State %in% quality_measures_ranking$state)
medicare_penetration$penetration_rank <- rank(medicare_penetration$penetration)
medicare_penetration_ranking <- inner_join(quality_measures_ranking,
medicare_penetration,
by = c("state" = "State"))
### Analysis 4: Correlate between Ranking and COVID-19 Mortality Rate by State
mortality_rate_raw <- read_csv("covid_19_mortality_rate_by_state_2020_to_2022.csv")
mortality_rate_raw <- mortality_rate_raw[, c("STATE", "YEAR", "RATE")]
print("***Analaysis 4 ***")
for (year in c("2020", "2021", "2022")){
mortality_rate  <- subset(mortality_rate_raw, STATE %in% quality_measures_ranking$state)
mortality_rate <- subset(mortality_rate, YEAR == year)
mortality_rate$mortality_rate_rank <- rank(mortality_rate$RATE)
mortality_rate_ranking <- inner_join(quality_measures_ranking,
mortality_rate,
by = c("state" = "STATE"))
print(paste0(year, " COVID Morality Rate"))
result <- cor.test(mortality_rate_ranking$final_ranking,
mortality_rate_ranking$RATE, method = "spearman")
print(result$estimate)
print(result$p.value)
}
print("***Analaysis 2 ***")
result <- cor.test(medicare_penetration_ranking$final_ranking,
medicare_penetration_ranking$penetration, method = "spearman")
print(result$estimate)
print(result$p.value)
### Analysis 3: Correlate between Ranking and Medicaid Renewal Rate
medicaid_renewal <- read_csv("Medicaid_Renewal_Rate_05232024.csv")
medicaid_renewal <- medicaid_renewal[, c("State", "RenewalRate")]
medicaid_renewal <- subset(medicaid_renewal, State %in% quality_measures_ranking$state)
medicaid_renewal$renewalrate_rank <- rank(medicaid_renewal$RenewalRate)
medicaid_renewal_ranking <- inner_join(quality_measures_ranking,
medicaid_renewal,
by = c("state" = "State"))
print("***Analaysis 3 ***")
result <- cor.test(medicaid_renewal_ranking$final_ranking,
medicaid_renewal_ranking$RenewalRate, method = "spearman")
print(result$estimate)
print(result$p.value)
########################################################################################
# Purpose: To merge Adult Healthcare Quality Measure Files together
# Author: William Pang
# Source: CMS
# https://www.medicaid.gov/medicaid/quality-of-care/performance-measurement/
# adult-and-child-health-care-quality-measures/adult-health-care-quality-measures/index.html
########################################################################################
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
library(tidyverse)
# Define Function
tidy_table <- function(file, measure = NULL){
cols_to_keep <- c("State", "Population", "Measure Name", "Measure Abbreviation", "State Rate")
file <- file[, cols_to_keep]
file <- file[file$Population == "Medicaid", ]
if (!is.null(measure)){
file <- file[file$`Measure Abbreviation` == measure, ]
}
return(file)
}
# Read in files
file_2022 <- read_csv("raw_data/2022_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
file_2022 <- tidy_table(file_2022)
file_2022$ffy <- 2022
file_2021 <- read_csv("raw_data/2021_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
file_2021 <- tidy_table(file_2021)
file_2021$ffy <- 2021
file_2020 <- read_csv("raw_data/2020_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
file_2020 <- tidy_table(file_2020)
file_2020$ffy <- 2020
file_2019 <- read_csv("raw_data/2019_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
file_2019 <- tidy_table(file_2019)
file_2019$ffy <- 2019
file_2018 <- read_csv("raw_data/2018_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
file_2018 <- tidy_table(file_2018)
file_2018$ffy <- 2018
file_2017 <- read_csv("raw_data/2017_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
file_2017 <- tidy_table(file_2017)
file_2017$ffy <- 2017
file_2016 <- read_csv("raw_data/2016_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
file_2016 <- tidy_table(file_2016)
file_2016$ffy <- 2016
file_2015 <- read_csv("raw_data/2015_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
file_2015 <- tidy_table(file_2015)
file_2015$ffy <- 2015
file_2014 <- read_csv("raw_data/2014_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
file_2014 <- tidy_table(file_2014)
file_2014$ffy <- 2014
df_combined <- rbind(file_2014, file_2015, file_2016, file_2017, file_2018, file_2019,
file_2020, file_2021, file_2022)
# Mathematica analysis of the Quality Measure Reporting (QMR) system reports for the FFY 2022 reporting cycle as of June 1, 2023.
df_combined$reporting_date <- df_combined$ffy + 1
df_combined$reporting_date <- paste0(df_combined$reporting_date, "-06-01")
df_combined$reporting_date <- as.Date(df_combined$reporting_date)
# Create boolean flag as before or after pandemic
df_combined$postcovid <- ifelse(df_combined$reporting_date >= as.Date('2021-06-01'), 1, 0)
# Rename columns
colnames(df_combined) <- c("state", "population", "measure_name", "measure_abbreviation", "state_rate", "ffy", "reporting_date", "postcovid")
# Write to CSV
write.csv(df_combined, "2014_to_2022_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv", row.names = FALSE)
########################################################################################
# Purpose: To generate Medicare Advantage(MA) Penetration Statistics, by state
# Author: William Pang
# Source: CMS
#https://www.cms.gov/data-research/statistics-trends-and-reports/medicare-advantagepart-d-contract-\
#and-enrollment-data/ma-state/county-penetration
########################################################################################
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
library(tidyverse)
# Read in files
MA_2022_12 <- read_csv("raw_data/State_County_Penetration_MA_2022_12.csv")
# Recode * (which denotes less than 10 enrollees) into 0
MA_2022_12$Enrolled[MA_2022_12$Enrolled == "*"] <- "0"
MA_2022_12$Enrolled <- gsub(",", "", MA_2022_12$Enrolled)
MA_2022_12$Enrolled <- as.numeric(MA_2022_12$Enrolled)
# Group by state and sum
MA_2022_12_by_state <- MA_2022_12 %>%
group_by(`State Name`) %>%
summarise(total_enrolled = sum(Enrolled, na.rm = TRUE),
total_eligibles = sum(Eligibles, na.rm = TRUE))
MA_2022_12_by_state$Penetration = round(100*(MA_2022_12_by_state$total_enrolled/MA_2022_12_by_state$total_eligibles),2)
colnames(MA_2022_12_by_state) <- c("State", "total_enrolled", "total_eligible", "penetration")
# Write to CSV
write.csv(MA_2022_12_by_state, "MA_2022_12_by_state.csv", row.names = FALSE)
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
###### Define Measures to Run ####
measure_names <- c("BCS-AD", "CCS-AD", "PPC-AD", "CHL-AD")
##################################
# Grab quality_measures dataset
quality_measures <- read_csv("2014_to_2022_Child_and_Adult_Health_Care_Quality_Measures_Quality.csv")
# Remove state rates with weird coding
quality_measures <- quality_measures[quality_measures$state_rate != "NR", ]
quality_measures <- quality_measures[quality_measures$state_rate != "DS", ]
iteration = 1
store <- data.frame()
for (measure in measure_names){
quality_measures_subset <- quality_measures[quality_measures$measure_abbreviation == measure, ]
###
# QA: Check to make sure each state only has one unique year
qaDistinctYear <- quality_measures_subset %>%
group_by(state) %>%
summarize(unique_years = n_distinct(ffy),
row_count = n())
different_rows <- qaDistinctYear %>% filter(unique_years != row_count)
if (nrow(different_rows) == 0) {
print("No rows with duplicate years.")
}
else{
stop("Detected rows with duplicate years")
}
###
models <- quality_measures_subset %>%
group_by(state) %>%
do(model = lm(state_rate ~ reporting_date + postcovid + reporting_date * postcovid, data = .))
# Extract coefficients from the models
coefficients <- models %>%
summarise(state = first(state),
beta1 = coef(model)[2],
beta3 = ifelse(length(coef(model)) > 3, coef(model)[4], NA))
# Remove rows with nulls and rank
coefficients <- coefficients[!is.na(coefficients$beta3), ]
coefficients$beta3rank <- rank(coefficients$beta3)
# Rename
beta1 <- paste0(measure, "_beta1")
beta3 <- paste0(measure, "_beta3")
beta3rank <- paste0(measure, "_beta3rank")
colnames(coefficients) <- c("state", beta1, beta3, beta3rank)
if (iteration == 1){
store <- coefficients
}
else {
store <- full_join(store, coefficients, by = "state")
}
# Increment
iteration = iteration + 1
}
# Average
beta3_rank_measure_names <- paste0(measure_names, "_beta3rank")
store$mean_rank <- rowMeans(store[beta3_rank_measure_names], na.rm = TRUE)
# Remove states with more than 1 measure being NA
na_count <- data.frame(store$state, cnt = rowSums(is.na(store)))
na_count <- na_count %>% filter(cnt > 4)
states_to_remove <- na_count$store.state
store <- store %>%
filter(!state %in% states_to_remove)
# Rank average of ranks
store$final_ranking <- rank(store$mean_rank)
write.csv(store, "quality_measures_prepostcovid_rank.csv", row.names = FALSE)
# Load libraries
library(tidyverse)
library(broom)
# Set Working Directory
setwd("/Users/williampang/Desktop/innovation_team_interview/medicaid_analysis")
quality_measures_ranking <- read_csv("quality_measures_prepostcovid_rank.csv")
quality_measures_ranking <- quality_measures_ranking[, c("state", "final_ranking")]
### Correlate between Ranking and Medicaid Spending by State
medicaid_spending <- read_csv("Total_Medicaid_Spending_FY2022.csv")
medicaid_spending <- medicaid_spending[, c("State", "PMPY")]
medicaid_spending <- subset(medicaid_spending, State %in% quality_measures_ranking$state)
medicaid_spending$pmpy_rank <- rank(medicaid_spending$PMPY)
medicaid_spending_ranking <- inner_join(quality_measures_ranking,
medicaid_spending,
by = c("state" = "State"))
result <- cor.test(medicaid_spending_ranking$final_ranking,
medicaid_spending_ranking$PMPY, method = "spearman")
print("*** Correlate between Ranking and Medicaid Spending by State ***")
print(result$estimate)
print(result$p.value)
### Correlate between Ranking and COVID-19 Mortality Rate by State
mortality_rate_raw <- read_csv("covid_19_mortality_rate_by_state_2020_to_2022.csv")
mortality_rate_raw <- mortality_rate_raw[, c("STATE", "YEAR", "RATE")]
print("*** Correlate between Ranking and COVID-19 Mortality Rate by State ***")
for (year in c("2020", "2021", "2022")){
mortality_rate  <- subset(mortality_rate_raw, STATE %in% quality_measures_ranking$state)
mortality_rate <- subset(mortality_rate, YEAR == year)
mortality_rate$mortality_rate_rank <- rank(mortality_rate$RATE)
mortality_rate_ranking <- inner_join(quality_measures_ranking,
mortality_rate,
by = c("state" = "STATE"))
print(paste0(year, " COVID Morality Rate"))
result <- cor.test(mortality_rate_ranking$final_ranking,
mortality_rate_ranking$RATE, method = "spearman")
print(result$estimate)
print(result$p.value)
}
### Correlate between Ranking and Medicare Advantage Penetration Rate
medicare_penetration <- read_csv("MA_Penetration_2022_12_by_state.csv")
medicare_penetration <- medicare_penetration[, c("State", "penetration")]
medicare_penetration <- subset(medicare_penetration, State %in% quality_measures_ranking$state)
medicare_penetration$penetration_rank <- rank(medicare_penetration$penetration)
medicare_penetration_ranking <- inner_join(quality_measures_ranking,
medicare_penetration,
by = c("state" = "State"))
print(" Correlate between Ranking and Medicare Advantage Penetration Rate ")
result <- cor.test(medicare_penetration_ranking$final_ranking,
medicare_penetration_ranking$penetration, method = "spearman")
print(result$estimate)
print(result$p.value)
### Correlate between Ranking and Medicaid Renewal Rate
medicaid_renewal <- read_csv("Medicaid_Renewal_Rate_05232024.csv")
medicaid_renewal <- medicaid_renewal[, c("State", "RenewalRate")]
medicaid_renewal <- subset(medicaid_renewal, State %in% quality_measures_ranking$state)
medicaid_renewal$renewalrate_rank <- rank(medicaid_renewal$RenewalRate)
medicaid_renewal_ranking <- inner_join(quality_measures_ranking,
medicaid_renewal,
by = c("state" = "State"))
print("*** Correlate between Ranking and Medicaid Renewal Rate ***")
result <- cor.test(medicaid_renewal_ranking$final_ranking,
medicaid_renewal_ranking$RenewalRate, method = "spearman")
print(result$estimate)
print(result$p.value)
